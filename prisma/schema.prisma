// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  point     Int
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id         Int         @id @default(autoincrement())
  title      String      @db.VarChar(255)
  writer     String      @db.VarChar(255)
  cover      String      @db.VarChar(255)
  price      Int
  orderItems OrderItem[]
  bookTags   BookTag[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model BookTag {
  id        Int      @id @default(autoincrement())
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String
  bookTags  BookTag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [userId], references: [id])
  userId     Int
  total      Int
  paid       Int
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
